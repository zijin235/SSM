<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.DynamicSQLMapper">
<!--        List<Emp> getEmpByCondition(@Param("emp") Emp emp);-->
<!--
        动态SQL
        1、if，通过test属性中的表达式判断标签中的内容是否有效（是否拼接到SQL语句中）
        2、若 where 标签中有条件成立，会自动生成where关键字；会自动将where标签中内容前的and去掉，内容后的and无法去掉；
            若where标签中没有任何一个条件成立，则where没有任何功能
        3、trim
            prefix、suffix：在标签中内容前面或后面添加指定内容
            prefixOverrides、suffixOverrides：在标签内容前面或后面去掉指定内容
        4、choose、when、otherwise
            相当于java中的 if..else if....else
            when至少设置一个，otherwise至多设置一个
        5、foreach
            collection:设置要循环的数组或集合
            item:用一个字符串表示数组或集合中的每一个数据
            separator：设置每次循环之间的分隔符
            open：循环的所有内容以什么开始
            close：循环的所有内容以什么结束

         6、SQL片段
            可以记录一段sql，在需要用的地方使用<include>进行引用

-->
    <select id="getEmpByCondition1" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where 1=1
        <if test="empName !=null and empName !=''">
            emp_name=#{empName}
        </if>
        <if test="empAge !=null and empAge!=''">
            and emp_age=#{empAge}
        </if>
        <if test="empGender !=null and empGender !=''">
            and emp_gender=#{empGender}
        </if>
    </select>

    <select id="getEmpByCondition2" resultType="Emp">
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName !=null and empName !=''">
                emp_name=#{empName} and
            </if>
            <if test="empAge !=null and empAge!=''">
                emp_age=#{empAge} and
            </if>
            <if test="empGender !=null and empGender !=''">
                emp_gender=#{empGender} and
            </if>
        </trim>

    </select>

    <select id="getEmpByCondition" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where 1=1
        <if test="empName !=null and empName !=''">
            emp_name=#{empName}
        </if>
        <if test="empAge !=null and empAge!=''">
            and emp_age=#{empAge}
        </if>
        <if test="empGender !=null and empGender !=''">
            and emp_gender=#{empGender}
        </if>
    </select>

    <select id="getEmpByChoose" resultType="Emp" parameterType="mybatis.pojo.Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="emp.empName !=null and emp.empName !=''">
                    emp_name=#{emp.empName}
                </when>
                <when test="emp.empAge !=null and emp.empAge!=''">
                    emp_age=#{emp.empAge}
                </when>
                <when test="emp.empGender !=null and emp.empGender!=''">
                    emp_gender=#{emp.empGender}
                </when>
            </choose>
        </where>
    </select>

<!--        void insertMoreEmp(List<Emp> emps);-->
    <insert id="insertMoreEmp" >
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.empAge},#{emp.empGender},null)
        </foreach>
    </insert>
<!--    void deleteMoreEmp(@Param("empIds")Integer[] empIds);-->
    <delete id="deleteMoreEmp">
<!--        delete from t_emp where emp_id in-->
<!--            <foreach collection="empIds" item="empId" separator="," open="(" close=")">-->
<!--                #{empId}-->
<!--            </foreach>-->
            delete from t_emp where
            <foreach collection="empIds" item="empId" separator="or">
                emp_id=#{empId}
            </foreach>
    </delete>

    <sql id="empColumns">
        emp_id,emp_name,emp_age,emp_gender,dept_id
    </sql>
</mapper>