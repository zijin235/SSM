<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--    扫描控制层组件-->
    <context:component-scan base-package="com.Zijin"/>

    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver"
          class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean
                            class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--                        /WEB-INF/templates/index.html-->
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!--    视图控制器：为当前的请求直接设置视图名称实现页面跳转-->
<!--    若设置视图控制器，则只有视图控制器所设置的请求会被处理，其他的请求全部404
        此时必须配置<mvc:annotation-driven/>
 -->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    <!--
            处理静态资源，例如html、js、css、jpg
    若只设置该标签，则只能访问静态资源，其他请求则无法访问
    此时必须设置<mvc:annotation-driven/>解决问题
    配置默认的servlet处理静态资源
    当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/
    tomcat的web.xml配置的DefaultServlet的url-pattern也是/
    此时，浏览器发送的请求会优先被DispatcherServlet进行处理，但是DispatcherServlet无法处理静态资源
    若配置了<mvc:default-servlet-handler/>，此时浏览器发送到所有请求都会被defaultservlet处理
    若配置了<mvc:default-servlet-handler/>和<mvc:annotation-driven>，请求会先被DispatcherServlet处理
    无法处理会交给defaultservlet处理。
    -->
    <mvc:default-servlet-handler/>
    <!-- 开启mvc注解驱动 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean
                    class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
<!--    配置文件上传解析器-->
    <bean  id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

    </bean>
<!--    配置拦截器-->
    <mvc:interceptors>
<!--        bean和ref标签所配置的拦截器默认对DispathcerServlet处理的所有的请求进行拦截-->
<!--        <bean class="com.Zijin.interceptor.Firstinterceptor"></bean>-->
<!--        <ref bean="firstinterceptor"></ref>-->
<!--        <mvc:interceptor>-->
<!--            &lt;!&ndash; 配置需要拦截的请求的请求路径 /**表示所有请求&ndash;&gt;-->
<!--            <mvc:mapping path="/**"/>&lt;!&ndash; /*表示/下面一层目录路径执行拦截器效果&ndash;&gt;-->
<!--            &lt;!&ndash; 配置需要排除拦截的请求的请求路径&ndash;&gt;-->
<!--            <mvc:exclude-mapping path="/abc"/>-->
<!--            &lt;!&ndash; 配置拦截器&ndash;&gt;-->
<!--            <ref bean="firstinterceptor"></ref>-->
<!--            -->
<!--        </mvc:interceptor>-->
        <ref bean="firstinterceptor"></ref>
        <ref bean="secondinterceptor"></ref>
    </mvc:interceptors>
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->
<!--        <property name="exceptionMappings">-->
<!--            <props>-->
<!--&lt;!&ndash;                key设置要处理的异常，value设置出现该异常时要跳转的页面所对应的逻辑视图&ndash;&gt;-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--&lt;!&ndash;        设置共享在请求域中的异常信息的属性名&ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ex">-->
<!--        </property>-->
<!--    </bean>-->
</beans>